import discord
from discord.ext import commands
from utils.Constants import ConstantsClass

class RulesCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.has_permissions(administrator=True)
    @commands.command(help="Give server rules")
    async def rules_cat(self, ctx):
        # Define the embed content
        embed = discord.Embed(
            title="Server Rules",
            description=(
                "## **General Server Rules**\n"
                "‚Ä¢ No blank, inappropriate, sexually explicit, or offensive nicknames.\n"
                "‚Ä¢ No unreadable Unicode nicknames.\n"
                "‚Ä¢ No blank, inappropriate, sexually explicit, or offensive profile pictures.\n"
                "‚Ä¢ No members under 18 years old.\n"
                "‚Ä¢ Moderators may use their discretion regardless of the rules.\n"
                "‚Ä¢ Report any rule loopholes.\n\n"
                "## **Text Chat Rules**\n"
                "‚Ä¢ No questioning or @mentioning mods (use ‚Å†üí•-issues-üí• for support).\n"
                "‚Ä¢ No @everyone/@here without permission.\n"
                "‚Ä¢ No @mentioning spam.\n"
                "‚Ä¢ No NSFW content.\n"
                "‚Ä¢ No personal information sharing.\n"
                "‚Ä¢ No personal attacks, witch hunting, harassment, sexism, racism, hate speech, or offensive language.\n"
                "‚Ä¢ No spamming or excessive messaging.\n"
                "‚Ä¢ No walls of text or overusing emojis/reactions.\n"
                "‚Ä¢ Keep conversations in English.\n"
                "‚Ä¢ Moderators can delete or edit posts.\n"
                "‚Ä¢ Use allowed bot commands only.\n"
                "‚Ä¢ No channel hopping.\n"
                "‚Ä¢ Stay on-topic.\n\n"
                "## **Voice Chat Rules**\n"
                "‚Ä¢ No channel hopping.\n"
                "‚Ä¢ No annoying, loud, or high-pitched noises.\n"
                "‚Ä¢ Minimize background noise.\n"
                "‚Ä¢ Moderators may disconnect for poor sound quality.\n"
                "‚Ä¢ Moderators can disconnect, mute, deafen, or move members.\n\n"
                "## **Bot Specific Rules**\n"
                "‚Ä¢ No command spam.\n"
                "‚Ä¢ Use bot commands only in ‚Å†ü§ñ-bot-ü§ñ.\n\n"
            ),
            color=discord.Color.blue()
        )
        embed.set_footer(text="Please click on '‚úÖ' to access the rest of the server (by clicking, you agree to follow ALL the rules mentioned above).")
        
        # Send the embed with the persistent view
        view = RulesView()
        message = await ctx.send(embed=embed, view=view)

    def get_menu_view(self):
        return RulesView()

class RulesView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.value = None  # Utilis√© pour stocker la valeur si n√©cessaire

    @discord.ui.button(emoji='‚úÖ', custom_id='accept_rules')
    async def accept_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        member = interaction.user
        guild = interaction.guild
        role = discord.utils.get(guild.roles, name=ConstantsClass.VERIFIED_ROLE_NAME)

        if role:
            try:
                await member.add_roles(role)
                await interaction.response.send_message(f"Role {role.name} added to {member.display_name}", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("I don't have permission to add roles.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Failed to add role.", ephemeral=True)
        else:
            await interaction.response.send_message("Role not found.", ephemeral=True)

async def setup(bot):
    await bot.add_cog(RulesCog(bot))
